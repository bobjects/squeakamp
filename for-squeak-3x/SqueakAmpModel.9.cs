'From Squeak2.8 of 13 June 2000 [latest update: #2359] on 21 December 2000 at 2:02:58 am'!"Change Set:		SqueakAmpModelDate:			19 December 2000Author:			Bob HartwigComments?  Question?  Email Bob Hartwig at bob@bobjectsinc.comSqueakAmp web site - http://www.bobjectsinc.com/squeakamp"!AlignmentMorph subclass: #SqueakAmpAbstractMorph	instanceVariableNames: 'playerMorph currentPlaylist '	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-GUI'!Object subclass: #SqueakAmpDiskObject	instanceVariableNames: 'pathName parent '	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!SqueakAmpDiskObject subclass: #SqueakAmpDirectory	instanceVariableNames: 'children '	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!SqueakAmpDiskObject subclass: #SqueakAmpFile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!Object subclass: #SqueakAmpFileSelectionStrategy	instanceVariableNames: 'streamOfFiles playlist '	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!SqueakAmpFileSelectionStrategy subclass: #FileShuffleFileSelectionStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!SqueakAmpFileSelectionStrategy subclass: #FolderShuffleFileSelectionStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!SqueakAmpFileSelectionStrategy subclass: #NoShuffleFileSelectionStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!SqueakAmpDiskObject subclass: #SqueakAmpNonExistentDiskObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!Object subclass: #SqueakAmpPlaylist	instanceVariableNames: 'repeat fileSelectionStrategy rootDiskObjects stateMachine '	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!Object subclass: #SqueakAmpState	instanceVariableNames: 'stateMachine '	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!SqueakAmpState subclass: #SqueakAmpPausedState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!SqueakAmpState subclass: #SqueakAmpPlayingState	instanceVariableNames: 'terminating '	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!Object subclass: #SqueakAmpStateMachine	instanceVariableNames: 'playlist currentState form mpegPlayer '	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!SqueakAmpState subclass: #SqueakAmpStoppedState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakAmp-Model'!!Object methodsFor: 'testing' stamp: 'bh 12/19/2000 14:28'!isSqueakAmpPlaylist	^false.! !!Object methodsFor: 'printing' stamp: 'bh 11/26/2000 00:55'!displayOn: aStream	self printOn: aStream.! !!Object methodsFor: 'printing' stamp: 'bh 11/26/2000 01:03'!displayString	^String streamContents: [:s | self displayOn: s].! !!FileDirectory methodsFor: 'testing' stamp: 'bh 11/25/2000 14:05'!exists	^ self directoryExists: self pathName! !!Integer methodsFor: 'printing' stamp: 'bh 11/25/2000 15:42'!printPaddedTo: anInteger	^self printString padded: #left to:2 with: $0.! !!MPEGPlayer methodsFor: 'access to attributes' stamp: 'bh 12/11/2000 22:17'!totalSeconds	^(self audioSamples: 0) / (self audioSampleRate: 0)! !!QueueSound methodsFor: 'accessing' stamp: 'bh 12/11/2000 20:05'!elapsedMilliseconds	^self startTime + self millisecondsSinceStart! !!SqueakAmpDiskObject methodsFor: 'initialization' stamp: 'bh 12/21/2000 02:00'!initializeForPathName: aString andParent: aSqueakAmpDirectoryOrNil 	pathName := aString.	parent := aSqueakAmpDirectoryOrNil.	self refreshChildren! !!SqueakAmpDiskObject methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isDirectory	^false! !!SqueakAmpDiskObject methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isFile	^false! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allChildren	^self children inject: OrderedCollection new		into: 			[:answer :each | 			answer				add: each;				addAll: each allChildren;				yourself]! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allDirectories	^self subclassResponsibility! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allFiles	^self subclassResponsibility! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allLeafDirectories	^self allDirectories select: [:dir | dir files notEmpty]! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allParents	^parent ifNil: [OrderedCollection new]		ifNotNil: 			[(parent allParents)				addLast: parent;				yourself]! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!children	^#()! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!exists	^FileDirectory basicNew fileOrDirectoryExists: self pathName! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!files	^self withChildren select: [:diskObject | diskObject isFile]! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!parent	^parent! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!pathName	^pathName! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!printOn: aStream 	super printOn: aStream.	aStream nextPut: $ .	aStream nextPutAll: self pathName! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!refreshChildren	self subclassResponsibility! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!time	| timeSeconds |	timeSeconds := self timeSeconds.	^timeSeconds ifNil: [nil] ifNotNil: [Time fromSeconds: timeSeconds]! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!timeSeconds	self subclassResponsibility! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!timeString	| time |	^(time := self time) ifNil: [' --:--'] ifNotNil: [time squeakAmpString]! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!withAllChildren	^(self allChildren)		addFirst: self;		yourself! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!withAllParents	^(self allParents)		addLast: self;		yourself! !!SqueakAmpDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!withChildren	^(self children asOrderedCollection)		addFirst: self;		yourself! !!SqueakAmpDirectory methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isDirectory	^true! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allDirectories	^self withAllChildren select: [:diskObject | diskObject isDirectory]! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allFiles	^self allChildren select: [:diskObject | diskObject isFile]! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!children	^children! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!deriveSqueakAmpDirectories	^(self getSubdirectoryPaths 		collect: [:dirName | self class newForPathName: dirName andParent: self]) 			reject: [:dir | dir allFiles isEmpty]! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!deriveSqueakAmpFiles	^(self getFilePaths 		collect: [:fileName | SqueakAmpFile newForPathName: fileName andParent: self]) 			select: [:file | file isValidFile]! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!displayOn: aStream 	aStream nextPutAll: self localName! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!fileDirectory	^FileDirectory on: pathName! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!getFilePaths	^self fileDirectory fileNames 		collect: [:fileName | self fileDirectory fullNameFor: fileName]! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!getSubdirectoryPaths	^self fileDirectory directoryNames 		collect: [:dirName | self fileDirectory fullNameFor: dirName]! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!localName	^(pathName findTokens: FileDirectory pathNameDelimiter asString) last! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!refreshChildren	children := OrderedCollection new.	self exists 		ifTrue: 			[children addAll: self deriveSqueakAmpDirectories.			children addAll: self deriveSqueakAmpFiles]! !!SqueakAmpDirectory methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!timeSeconds	^self children inject: 0		into: 			[:answer :each | 			| timeSeconds |			timeSeconds := each timeSeconds.			timeSeconds ifNil: [^nil] ifNotNil: [answer + each timeSeconds]]! !!SqueakAmpDiskObject class methodsFor: 'instance creation' stamp: 'bh 12/21/2000 02:00'!newForPathName: aString 	^self newForPathName: aString andParent: nil! !!SqueakAmpDiskObject class methodsFor: 'instance creation' stamp: 'bh 12/21/2000 02:00'!newForPathName: aString andParent: aSqueakAmpDirectoryOrNil 	^(self classForPathName: aString) new initializeForPathName: aString		andParent: aSqueakAmpDirectoryOrNil! !!SqueakAmpDiskObject class methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!classForPathName: aString 	(self pathNameIsDirectory: aString) ifTrue: [^SqueakAmpDirectory].	(self pathNameIsFile: aString) ifTrue: [^SqueakAmpFile].	^SqueakAmpNonExistentDiskObject! !!SqueakAmpDiskObject class methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!pathNameIsDirectory: aString 	^(FileDirectory basicNew fileOrDirectoryExists: aString) 		and: [(self pathNameIsFile: aString) not]! !!SqueakAmpDiskObject class methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!pathNameIsFile: aString 	^FileDirectory basicNew fileExists: aString! !!SqueakAmpDirectory class methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!classForPathName: aString 	^self! !!SqueakAmpFile methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isFile	^true! !!SqueakAmpFile methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isValidFile	^self exists and: [self hasValidExtension]! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allDirectories	^#()! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allFiles	^{ 		self}! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!displayOn: aStream 	aStream nextPutAll: self fileNameWithoutExtension! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!extension	| extension |	extension := (pathName findTokens: '.') last.	^(extension includes: FileDirectory pathNameDelimiter) 		ifTrue: ['']		ifFalse: [extension]! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!fileName	^(pathName findTokens: FileDirectory pathNameDelimiter asString) last! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!fileNameWithoutExtension	^self fileName copyFrom: 1 to: self fileName size - self extension size - 1! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!hasValidExtension	^self validExtensions includes: self extension! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!refreshChildren	"Files don't have children"	! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!timeSeconds	self flag: #needsWork.	^60 * 120! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!trackTitle	^self trackTitleFromHeader ifNil: [self trackTitleFromPathName]! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!trackTitleFromHeader	self flag: #needsWork.	^nil! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!trackTitleFromPathName	^self fileNameWithoutExtension! !!SqueakAmpFile methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!validExtensions	^#('mp3')! !!SqueakAmpFile class methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!classForPathName: aString 	^self! !!SqueakAmpFileSelectionStrategy methodsFor: 'initialization' stamp: 'bh 12/21/2000 02:00'!initializeForPlaylist: aSqueakAmpPlaylist 	playlist := aSqueakAmpPlaylist.	self reset! !!SqueakAmpFileSelectionStrategy methodsFor: 'file accessing' stamp: 'bh 12/21/2000 02:00'!currentFile	^streamOfFiles peek! !!SqueakAmpFileSelectionStrategy methodsFor: 'file accessing' stamp: 'bh 12/21/2000 02:00'!filesAlreadyPlayed	^streamOfFiles contents copyFrom: 1 to: streamOfFiles position! !!SqueakAmpFileSelectionStrategy methodsFor: 'file accessing' stamp: 'bh 12/21/2000 02:00'!filesYetToBePlayed	^streamOfFiles atEnd 		ifTrue: [#()]		ifFalse: 			[streamOfFiles contents copyFrom: streamOfFiles position + 1				to: streamOfFiles contents size]! !!SqueakAmpFileSelectionStrategy methodsFor: 'file accessing' stamp: 'bh 12/21/2000 02:00'!makeFileCurrent: aSqueakAmpFile 	| index |	index := streamOfFiles contents indexOf: aSqueakAmpFile				ifAbsent: 					[streamOfFiles						setToEnd;						nextPut: aSqueakAmpFile.					^self makeFileCurrent: aSqueakAmpFile].	streamOfFiles position: index - 1! !!SqueakAmpFileSelectionStrategy methodsFor: 'file accessing' stamp: 'bh 12/21/2000 02:00'!next	| next |	next := streamOfFiles next.	streamOfFiles atEnd ifTrue: [playlist usesRepeat ifTrue: [self reset]].	^next! !!SqueakAmpFileSelectionStrategy methodsFor: 'file accessing' stamp: 'bh 12/21/2000 02:00'!previous	streamOfFiles position: (streamOfFiles position - 1 max: 0).	^streamOfFiles peek! !!SqueakAmpFileSelectionStrategy methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isFileShuffle	^false! !!SqueakAmpFileSelectionStrategy methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isFolderShuffle	^false! !!SqueakAmpFileSelectionStrategy methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isNoShuffle	^false! !!SqueakAmpFileSelectionStrategy methodsFor: 'stream population' stamp: 'bh 12/21/2000 02:00'!getFilesForStream	self subclassResponsibility! !!SqueakAmpFileSelectionStrategy methodsFor: 'stream population' stamp: 'bh 12/21/2000 02:00'!insertAtCurrent: aSqueakAmpDiskObject 	streamOfFiles nextPut: aSqueakAmpDiskObject! !!SqueakAmpFileSelectionStrategy methodsFor: 'stream population' stamp: 'bh 12/21/2000 02:00'!repopulate	| files position |	files := self getFilesForStream.	position := (files indexOf: self currentFile ifAbsent: [1]) - 1.	streamOfFiles := ReadStream on: files.	streamOfFiles position: position! !!SqueakAmpFileSelectionStrategy methodsFor: 'stream population' stamp: 'bh 12/21/2000 02:00'!reset	streamOfFiles := (ReadStream on: self getFilesForStream)				reset;				yourself! !!FileShuffleFileSelectionStrategy methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isFileShuffle	^true! !!FileShuffleFileSelectionStrategy methodsFor: 'stream population' stamp: 'bh 12/21/2000 02:00'!getFilesForStream	^playlist allFiles shuffled! !!FolderShuffleFileSelectionStrategy methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isFolderShuffle	^true! !!FolderShuffleFileSelectionStrategy methodsFor: 'stream population' stamp: 'bh 12/21/2000 02:00'!getFilesForStream	^playlist allLeafDirectories shuffled inject: OrderedCollection new		into: 			[:answer :each | 			answer				addAll: each files;				yourself]! !!NoShuffleFileSelectionStrategy methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isNoShuffle	^true! !!NoShuffleFileSelectionStrategy methodsFor: 'stream population' stamp: 'bh 12/21/2000 02:00'!getFilesForStream	^playlist allFiles! !!SqueakAmpFileSelectionStrategy class methodsFor: 'instance creation' stamp: 'bh 12/21/2000 02:00'!newForPlaylist: aSqueakAmpPlaylist 	^self new initializeForPlaylist: aSqueakAmpPlaylist! !!SqueakAmpNonExistentDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allDirectories	^#()! !!SqueakAmpNonExistentDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allFiles	^#()! !!SqueakAmpNonExistentDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!displayOn: aStream 	aStream nextPutAll: '<file does not exist>'! !!SqueakAmpNonExistentDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!refreshChildren	! !!SqueakAmpNonExistentDiskObject methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!timeSeconds	^0! !!SqueakAmpPlaylist methodsFor: 'initialization' stamp: 'bh 12/21/2000 02:00'!initialize	rootDiskObjects := OrderedCollection new.	repeat := self defaultUseRepeat.	fileSelectionStrategy := self defaultFileSelectionStrategy.	self initializeStateMachine! !!SqueakAmpPlaylist methodsFor: 'initialization' stamp: 'bh 12/21/2000 02:00'!initializeForDiskObjects: aCollection 	rootDiskObjects := aCollection.	fileSelectionStrategy reset! !!SqueakAmpPlaylist methodsFor: 'initialization' stamp: 'bh 12/21/2000 02:00'!initializeStateMachine	stateMachine := SqueakAmpStateMachine newForPlaylist: self! !!SqueakAmpPlaylist methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isPlaying	^stateMachine isPlaying! !!SqueakAmpPlaylist methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isSqueakAmpPlaylist	^true! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!addRootDiskObject: aSqueakAmpDiskObject 	self rootDiskObjects: ((self rootDiskObjects)				add: aSqueakAmpDiskObject;				yourself)! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allDiskObjects	^rootDiskObjects inject: OrderedCollection new		into: 			[:answer :each | 			answer				addAll: each withAllChildren;				yourself]! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allFiles	^rootDiskObjects inject: OrderedCollection new		into: 			[:answer :each | 			answer				addAll: each allFiles;				yourself]! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!allLeafDirectories	^rootDiskObjects inject: OrderedCollection new		into: 			[:answer :each | 			answer				addAll: each allLeafDirectories;				yourself]! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFile	^fileSelectionStrategy currentFile! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileElapsedPercentage	^stateMachine currentFileElapsedPercentage! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileElapsedTime	^stateMachine currentFileElapsedTime! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileElapsedTimeString	^stateMachine currentFileElapsedTimeString! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileTimeString	| file |	^(file := self currentFile) ifNil: ['--:--'] ifNotNil: [file timeString]! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileTotalTime	^stateMachine currentFileTotalTime! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileTotalTimeString	^stateMachine currentFileTotalTimeString! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileTrackTitle	| file |	^(file := self currentFile) ifNil: [''] ifNotNil: [file trackTitle]! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!defaultFileSelectionStrategy	^NoShuffleFileSelectionStrategy newForPlaylist: self! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!defaultUseRepeat	^false! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!fileSelectionStrategy	^fileSelectionStrategy! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!makeDiskObjectCurrent: aSqueakAmpDiskObject 	| allFiles |	(self allDiskObjects includes: aSqueakAmpDiskObject) 		ifFalse: [self addRootDiskObject: aSqueakAmpDiskObject].	(allFiles := aSqueakAmpDiskObject allFiles) notEmpty 		ifTrue: [self makeFileCurrent: allFiles first]! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!makeFileCurrent: aSqueakAmpFile 	^fileSelectionStrategy makeFileCurrent: aSqueakAmpFile! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!nextFile	^fileSelectionStrategy next! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!previousFile	^fileSelectionStrategy previous! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!rootDiskObjects	^rootDiskObjects! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!rootDiskObjects: aCollection 	rootDiskObjects := aCollection.	self fileSelectionStrategy repopulate! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!stateMachine	^stateMachine! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!useFileShuffle	self usesFileShuffle 		ifFalse: 			[fileSelectionStrategy := FileShuffleFileSelectionStrategy 						newForPlaylist: self]! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!useFolderShuffle	self usesFolderShuffle 		ifFalse: 			[fileSelectionStrategy := FolderShuffleFileSelectionStrategy 						newForPlaylist: self]! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!useNoShuffle	self usesNoShuffle 		ifFalse: 			[fileSelectionStrategy := NoShuffleFileSelectionStrategy 						newForPlaylist: self]! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!useRepeat: anInteger 	repeat := anInteger! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!usesFileShuffle	^fileSelectionStrategy isFileShuffle! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!usesFolderShuffle	^fileSelectionStrategy isFolderShuffle! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!usesNoShuffle	^fileSelectionStrategy isNoShuffle! !!SqueakAmpPlaylist methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!usesRepeat	^repeat! !!SqueakAmpPlaylist methodsFor: 'fileIn/Out' stamp: 'bh 12/21/2000 02:00'!saveToPathName: aString 	| stream |	stream := SmartRefStream fileNamed: aString.	stream nextPut: self.	stream close! !!SqueakAmpPlaylist class methodsFor: 'fileIn/Out' stamp: 'bh 12/21/2000 02:00'!loadFromPathName: aString 	| stream playlist |	stream := FileStream oldFileNamed: aString.	^	[playlist := stream fileInObjectAndCode.	playlist isSqueakAmpPlaylist 		ifTrue: 			["playlist fileSelectionStrategy reset; repopulate."			playlist initializeStateMachine].	playlist] 			ensure: [stream close]! !!SqueakAmpPlaylist class methodsFor: 'instance creation' stamp: 'bh 12/21/2000 02:00'!new	^super new initialize! !!SqueakAmpPlaylist class methodsFor: 'instance creation' stamp: 'bh 12/21/2000 02:00'!newForDiskObject: aSqueakAmpDiskObject 	^self newForDiskObjects: { 				aSqueakAmpDiskObject}! !!SqueakAmpPlaylist class methodsFor: 'instance creation' stamp: 'bh 12/21/2000 02:00'!newForDiskObjects: aCollection 	^self new initializeForDiskObjects: aCollection! !!SqueakAmpPlaylist class methodsFor: 'instance creation' stamp: 'bh 12/21/2000 02:00'!newForPathName: aString 	^self newForDiskObject: (SqueakAmpDiskObject newForPathName: aString)! !!SqueakAmpState methodsFor: 'initialization' stamp: 'bh 12/21/2000 02:00'!initializeForStateMachine: aSqueakAmpStateMachine 	stateMachine := aSqueakAmpStateMachine! !!SqueakAmpState methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isPlaying	^false! !!SqueakAmpState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!assumeState	! !!SqueakAmpState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!nextSelected	! !!SqueakAmpState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!pauseSelected	! !!SqueakAmpState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!percentageSelected: aNumber 	! !!SqueakAmpState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playDiskObjectSelected: aSqueakAmpDiskObject 	! !!SqueakAmpState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playSelected	! !!SqueakAmpState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playlist	^stateMachine playlist! !!SqueakAmpState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!previousSelected	! !!SqueakAmpState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!relinquishState	! !!SqueakAmpState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!stopSelected	! !!SqueakAmpPausedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!assumeState	stateMachine privateStop! !!SqueakAmpPausedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!nextSelected	self playlist nextFile.	stateMachine privateCreatePlayer! !!SqueakAmpPausedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!pauseSelected	stateMachine switchState: SqueakAmpPlayingState! !!SqueakAmpPausedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!percentageSelected: aNumber 	stateMachine privateSetPercentage: aNumber! !!SqueakAmpPausedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playDiskObjectSelected: aSqueakAmpDiskObject 	self playlist makeDiskObjectCurrent: aSqueakAmpDiskObject.	stateMachine privateCreatePlayer.	stateMachine switchState: SqueakAmpPlayingState! !!SqueakAmpPausedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playSelected	stateMachine switchState: SqueakAmpPlayingState! !!SqueakAmpPausedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!previousSelected	self playlist previousFile.	stateMachine privateCreatePlayer! !!SqueakAmpPausedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!stopSelected	stateMachine switchState: SqueakAmpStoppedState! !!SqueakAmpPlayingState methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isPlaying	^true! !!SqueakAmpPlayingState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!assumeState	terminating := false.	self playlist currentFile 		ifNil: [stateMachine switchState: SqueakAmpStoppedState]		ifNotNil: 			[stateMachine privatePlay.			self forkTrackIncrementProcess]! !!SqueakAmpPlayingState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!forkTrackIncrementProcess		[| delay |	delay := Delay forMilliseconds: 100.	[terminating] whileFalse: 			[| player |			(player := stateMachine mpegPlayer) ifNotNil: 					[(player endOfAudio: 0) ifTrue: [self playNextTrack].					delay wait]]] 			fork! !!SqueakAmpPlayingState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!nextSelected	self playNextTrack! !!SqueakAmpPlayingState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!pauseSelected	stateMachine switchState: SqueakAmpPausedState! !!SqueakAmpPlayingState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!percentageSelected: aNumber 	stateMachine privateSetPercentage: aNumber! !!SqueakAmpPlayingState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playDiskObjectSelected: aSqueakAmpDiskObject 	stateMachine privateStop.	self playlist makeDiskObjectCurrent: aSqueakAmpDiskObject.	stateMachine		privateCreatePlayer;		privatePlay! !!SqueakAmpPlayingState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playNextTrack	stateMachine privateStop.	self playlist nextFile.	self playlist currentFile 		ifNil: [stateMachine switchState: SqueakAmpStoppedState]		ifNotNil: 			[stateMachine				privateCreatePlayer;				privatePlay]! !!SqueakAmpPlayingState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playSelected	stateMachine		privateStop;		privateCreatePlayer;		privatePlay! !!SqueakAmpPlayingState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!previousSelected	stateMachine privateStop.	self playlist previousFile.	stateMachine		privateCreatePlayer;		privatePlay! !!SqueakAmpPlayingState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!relinquishState	terminating := true! !!SqueakAmpPlayingState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!stopSelected	stateMachine switchState: SqueakAmpStoppedState! !!SqueakAmpState class methodsFor: 'instance creation' stamp: 'bh 12/21/2000 02:00'!newForStateMachine: aSqueakAmpStateMachine 	^self new initializeForStateMachine: aSqueakAmpStateMachine! !!SqueakAmpStateMachine methodsFor: 'testing' stamp: 'bh 12/21/2000 02:00'!isPlaying	^currentState isPlaying! !!SqueakAmpStateMachine methodsFor: 'initialization' stamp: 'bh 12/21/2000 02:00'!initializeForPlaylist: aSqueakAmpPlaylist 	playlist := aSqueakAmpPlaylist.	form := Form extent: 320 @ 240 depth: 16.	self switchState: SqueakAmpStoppedState! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileElapsedPercentage	| player |	^(player := mpegPlayer) ifNil: [0]		ifNotNil: [player currentLocationInPercent: 0]! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileElapsedTime	| player |	^(player := mpegPlayer) 		ifNotNil: [Time fromSeconds: player getTimeCode asInteger]! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileElapsedTimeString	| time |	^(time := self currentFileElapsedTime) ifNil: [' --:--']		ifNotNil: [time squeakAmpString]! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileTotalTime	| player |	^(player := mpegPlayer) 		ifNotNil: [Time fromSeconds: player totalSeconds asInteger]! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!currentFileTotalTimeString	| time |	^(time := self currentFileTotalTime) ifNil: [' --:--']		ifNotNil: [time squeakAmpString]! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!mpegPlayer	^mpegPlayer! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!nextSelected	currentState nextSelected! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!pauseSelected	currentState pauseSelected! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!percentageSelected: aNumber 	currentState percentageSelected: aNumber! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playDiskObjectSelected: aSqueakAmpDiskObject 	currentState playDiskObjectSelected: aSqueakAmpDiskObject! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playSelected	currentState playSelected! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playlist	^playlist! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!previousSelected	currentState previousSelected! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!privateCreatePlayer	| file |	mpegPlayer := (file := playlist currentFile) 				ifNotNil: [MPEGPlayer playFile: file pathName onForm: form]				ifNil: [nil]! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!privatePlay	mpegPlayer playAudioStream: 0! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!privateSetPercentage: aNumber 	mpegPlayer setLocation: aNumber forStream: 0! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!privateStop	mpegPlayer ifNotNil: 			[mpegPlayer stop.			[mpegPlayer isPlaying] whileTrue: [Processor yield]]! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!stopSelected	currentState stopSelected! !!SqueakAmpStateMachine methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!switchState: aClass 	currentState ifNotNil: [currentState relinquishState].	currentState := aClass newForStateMachine: self.	currentState assumeState! !!SqueakAmpStateMachine class methodsFor: 'instance creation' stamp: 'bh 12/21/2000 02:00'!newForPlaylist: aSqueakAmpPlaylist 	^self new initializeForPlaylist: aSqueakAmpPlaylist! !!SqueakAmpStoppedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!assumeState	stateMachine		privateStop;		privateCreatePlayer! !!SqueakAmpStoppedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!nextSelected	self playlist nextFile.	stateMachine privateCreatePlayer! !!SqueakAmpStoppedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playDiskObjectSelected: aSqueakAmpDiskObject 	self playlist makeDiskObjectCurrent: aSqueakAmpDiskObject.	stateMachine privateCreatePlayer.	stateMachine switchState: SqueakAmpPlayingState! !!SqueakAmpStoppedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!playSelected	stateMachine privateCreatePlayer.	stateMachine switchState: SqueakAmpPlayingState! !!SqueakAmpStoppedState methodsFor: 'as yet unclassified' stamp: 'bh 12/21/2000 02:00'!previousSelected	self playlist previousFile.	stateMachine privateCreatePlayer! !!Time methodsFor: 'accessing' stamp: 'bh 11/25/2000 15:46'!totalMinutes	^seconds // 60! !!Time methodsFor: 'printing' stamp: 'bh 12/11/2000 21:02'!squeakAmpString	^((self totalMinutes printString), ':', (self seconds printPaddedTo:2)) padded:#left to:6 with: $ .! !!Time class methodsFor: 'instance creation' stamp: 'bh 12/11/2000 20:06'!fromMilliseconds: anInteger	^self fromSeconds: anInteger // 1000.! !"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."!